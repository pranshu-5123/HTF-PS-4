from abc import ABC, abstractmethod
from typing import Any, Dict, List
import logging
import requests
from ..config.config import settings

class BaseAgent(ABC):
    def __init__(self, agent_id: str, agent_type: str):
        self.agent_id = agent_id
        self.agent_type = agent_type
        self.logger = self._setup_logger()
        
    def _setup_logger(self) -> logging.Logger:
        """Set up logging for the agent."""
        logger = logging.getLogger(f"{self.agent_type}_{self.agent_id}")
        logger.setLevel(logging.INFO)
        
        if not logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            )
            handler.setFormatter(formatter)
            logger.addHandler(handler)
        
        return logger
    
    async def query_ollama(self, prompt: str) -> str:
        """Query the Ollama model."""
        try:
            response = requests.post(
                f"{settings.OLLAMA_API_BASE}/api/generate",
                json={
                    "model": settings.OLLAMA_MODEL,
                    "prompt": prompt
                }
            )
            response.raise_for_status()
            return response.json()["response"]
        except Exception as e:
            self.logger.error(f"Error querying Ollama: {str(e)}")
            return ""
    
    @abstractmethod
    async def process(self, data: Any) -> Dict[str, Any]:
        """Process incoming data and return results."""
        pass
    
    @abstractmethod
    async def handle_alert(self, alert_data: Dict[str, Any]) -> bool:
        """Handle alerts generated by the agent."""
        pass
    
    def log_activity(self, activity: str, level: str = "info") -> None:
        """Log agent activity."""
        log_method = getattr(self.logger, level.lower())
        log_method(f"[{self.agent_type}] {activity}")
    
    async def communicate(self, target_agent_id: str, message: Dict[str, Any]) -> None:
        """Communicate with other agents."""
        self.log_activity(f"Sending message to agent {target_agent_id}: {message}")
        # Implementation of inter-agent communication will go here
        pass 